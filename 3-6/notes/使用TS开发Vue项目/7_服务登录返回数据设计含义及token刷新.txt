access_token // 获取需要授权的接口数据
expires_in // 过期时间
refresh_token // 刷新获取新的 access_token

access_token 过期时间设计的原因：
为了安全

刷新token的方法：
1、在请求发起前拦截每个请求，判断token的有效时间是否已经过期，若已过期，则将请求挂起，先刷新token后再继续请求。
优点：在请求前拦截，能节省请求，省流量。
缺点：需要后端提供一个token过期时间的字段；使用了本地时间判断，若本地时间被篡改，特别是本地时间比服务器时间慢时，拦截会失败。

2、不在请求前拦截，而是拦截返回后的数据。先发起请求，接口返回过期后，先刷新token，再进行一次重试。
优点：不需要额外的token过期字段，不需判断时间。
缺点：会消耗多一次请求，耗流量。

综合考虑，更推荐方式2，安全性更好。
