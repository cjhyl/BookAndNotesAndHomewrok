initState(初始化Vue实例状态)-->initData(把data属性注入Vue实例)-->observe(把data数据转换为响应式对象)

observe(value)：
src/core/observer/index.js
判断value是否是对象，否则直接返回。
判断value对象是否有__ob__，有则直接返回，
没有则创建observer对象，
最后返回observer对象。

Observer：
src/core/observer/index.js
给value对象定义不可枚举的__ob__属性，记录当前的observer对象。
数组的响应式处理
对象的响应式处理，调用walk方法

defineReactive：
src/core/observer/index.js
为每一个属性创建dep对象
如果当前属性的值是对象，调用observe
定义getter，收集依赖，返回属性的值
定义setter，保存新值，如果新值是对象，调用observe，派发更新（发送通知），调用dep.notify()

依赖收集：
在watcher对象的get方法中调用pushTarget记录Dep.target属性
访问data中的成员的时候收集依赖，defineReactive的getter中收集依赖
把属性对应的watcher对象添加到dep的subs数组中
给childOb收集依赖，目的是子对象添加和删除成员时发送通知

Watcher
dep.notify()在调用watcher对象的update()方法
queueWatcher()判断watcher是否被处理，如果没有的话添加到queue队列中，并调用flushSchedulerQueue()
flushSchedulerQueue():
触发beforeUpdate钩子函数
调用watcher.run()  run()-->get()-->getter()-->updateComponent//渲染watcher
清空上一次依赖
触发actived钩子函数
处罚法updated钩子函数